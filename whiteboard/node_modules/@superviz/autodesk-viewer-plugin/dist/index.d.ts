/// <reference types="forge-viewer" />
import type { DefaultAttachComponentOptions } from '@superviz/sdk/lib/components/base/types';
import { AutodeskPin } from './services/comments-adapter';
import { AutodeskViewerComponentOptions, ParticipantOn3D } from './types';
declare class Presence3D {
    name: string;
    private localParticipant;
    private realtime;
    private eventBus;
    private logger;
    private config;
    private participants;
    private isAttached;
    private followParticipantId?;
    private localFollowParticipantId?;
    private avatars;
    private lasers;
    private names;
    private mouses;
    private positionInfos;
    private renderSilentInterval;
    private lastSyncedData;
    private viewer;
    private unsubscribeFrom;
    constructor(viewer: Autodesk.Viewing.GuiViewer3D, options?: AutodeskViewerComponentOptions);
    private get localParticipantId();
    attach: (params: DefaultAttachComponentOptions) => void;
    detach: () => void;
    private destroy;
    private start;
    private subscribeToRealtimeEvents;
    private unsubscribeToRealtimeEvents;
    private subscribeToEventBusEvents;
    private unsubscribeToEventBusEvents;
    /** Realtime Callbacks */
    private onParticipantJoined;
    private onLocalParticipantJoined;
    private onParticipantLeave;
    private onParticipantUpdated;
    private updateParticipant;
    private create3dPresence;
    private onRoomInfoUpdate;
    /** Participants */
    private createParticipantList;
    private createParticipantOn3D;
    private removeParticipant;
    private addParticipant;
    /** EventBus callbacks */
    /**
     * @function goTo
     * @description go to a participant
     * @param participantId - participant id to go to
     * @returns {void}
     */
    goTo: (participantId: string) => void;
    /**
     * @function gather
     * @description gather all participants
     * @returns {void}
     */
    gather: () => void;
    /**
     * @function setPrivate
     * @param {boolean} isPrivate
     * @description updates participant private status
     * @returns {void}
     */
    private setPrivate;
    /**
     * @function follow
     * @description follow a participant
     * @param participantId - participant id to follow, if not provided, follow is disabled
     * @returns {void}
     */
    follow(participantId?: string): void;
    /**
     * @function localFollow
     * @description follow a participant
     * @param participantId - participant id to follow, if not provided, follow is disabled
     * @returns {void}
     */
    private localFollow;
    createAvatar(participant: ParticipantOn3D): Promise<Object3D>;
    destroyAvatar(participant: ParticipantOn3D): Promise<void>;
    private createLaser;
    destroyLaser(participant: ParticipantOn3D): Promise<void>;
    private createName;
    private createMouse;
    destroyMouse(participant: ParticipantOn3D): Promise<void>;
    moveToAnotherParticipant(participantId: string): void;
    private onCameraChanged;
    private renderSilent;
    private onParticipantsUpdated;
    private sync;
    onMouseMove: (event: MouseEvent) => void;
}
export { Presence3D, AutodeskPin };
