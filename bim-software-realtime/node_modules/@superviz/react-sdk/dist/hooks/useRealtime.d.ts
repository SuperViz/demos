import { type RealtimeMessage } from '@superviz/sdk';
type UseRealtimeData = {
    /**
     * @property isReady
     * @description is the realtime component ready
     * @returns {boolean}
     */
    isReady: boolean;
    /**
     * @function subscribe
     * @description subscribe to a realtime event
     * @returns {void}
     */
    subscribe: <T extends Callback>(event: string, callback: T) => void;
    /**
     * @function unsubscribe
     * @description unsubscribe from a realtime event
     * @returns {void}
     */
    unsubscribe: <T extends Callback>(event: string, callback: T) => void;
    /**
     * @function publish
     * @description publish a realtime event
     * @returns {void}
     */
    publish: <T>(event: string, data: T) => void;
    /**
     * @function string
     * @description get realtime client data history
     * @returns {RealtimeMessage | Record<string, RealtimeMessage>}
     */
    fetchHistory: (eventName?: string) => Promise<RealtimeMessage[] | Record<string, RealtimeMessage[]> | null>;
};
type Callback = (data: any) => void;
export declare function useRealtime(): UseRealtimeData;
export {};
//# sourceMappingURL=useRealtime.d.ts.map