import type { Socket } from 'socket.io-client';
import { ErrorCallback } from '../../common/types/callbacks.types';
import { Presence } from '../../common/types/presence.types';
import { PresenceRoom } from '../presence';
import { Callback, RoomHistory } from './types';
export declare class Room {
    private io;
    private user;
    private roomId;
    private logger;
    private isJoined;
    presence: PresenceRoom;
    constructor(io: Socket, user: Presence, roomId: string);
    static register(io: Socket, presence: Presence, roomId: string): Room;
    /**
     * @function on
     * @description Listen to an event
     * @param event - The event to listen to
     * @param callback - The callback to execute when the event is emitted
     * @returns {void}
     */
    on<T>(event: string, callback: Callback<T>): void;
    /**
     * @function off
     * @description Stop listening to an event
     * @param event - The event to stop listening to
     * @param callback - The callback to remove from the event
     * @returns {void}
     */
    off<T>(event: string, callback: Callback<T>): void;
    /**
     * @function emit
     * @description Emit an event
     * @param event - The event to emit
     * @param payload - The payload to send with the event
     * @returns {void}
     */
    emit<T>(event: string, payload: T): void;
    /**
     * @function get
     * @description Get the presences in the room
     * @returns {void}
     */
    history(next: (data: RoomHistory) => void, error?: ErrorCallback): void;
    /**
     * @function disconnect
     * @description Disconnect from the room
     * @returns {void}
     */
    disconnect(): void;
    private subscribeToRoomEvents;
    /**
     * @function onJoinedRoom
     * @description handles the event when a user joins a room.
     * @param event The socket event containing presence data.
     * @returns {void}
     */
    private onJoinedRoom;
}
