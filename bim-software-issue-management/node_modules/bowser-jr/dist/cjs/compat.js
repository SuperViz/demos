"use strict";Object.defineProperties(exports,{__esModule:{value:!0},[Symbol.toStringTag]:{value:"Module"}});var t=require("./browserParser.js"),u=require("./engineParser.js"),a=require("./osParser.js"),l=require("./parser.js"),n=require("./platformParser.js");require("./utils.js");class m{constructor(r,e=!1){this.parser=l.getParser(r,{use:[t.browserParser,u.engineParser,a.osParser,n.platformParser],skipParsing:e})}getUA(){return this.parser.getUA()}test(r){return this.parser.test(r)}parseBrowser(){return t.getBrowser(this.parser)}getBrowser(){return t.getBrowser(this.parser)}getBrowserName(r=!1){return t.getBrowserName(this.parser,r)}getBrowserVersion(){return t.getBrowserVersion(this.parser)}getOS(){return a.getOS(this.parser)}parseOS(){return a.getOS(this.parser)}getOSName(r=!1){return a.getOSName(this.parser,r)}getOSVersion(){return a.getOSVersion(this.parser)}getPlatform(){n.getPlatform(this.parser)}getPlatformType(r=!1){return n.getPlatformType(this.parser)}parsePlatform(){return n.getPlatform(this.parser)}getEngine(){return u.getEngine(this.parser)}getEngineName(r=!1){return u.getEngineName(this.parser,r)}parseEngine(){return u.getEngine(this.parser)}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return this.parser.getResult()}satisfies(r){const e={};let f=0;const g={};let h=0;if(Object.keys(r).forEach(o=>{const s=r[o];typeof s=="string"?(g[o]=s,h+=1):typeof s=="object"&&(e[o]=s,f+=1)}),f>0){const o=Object.keys(e),s=o.find(i=>this.isOS(i));if(s){const i=this.satisfies(e[s]);if(i!==void 0)return i}const p=o.find(i=>this.isPlatform(i));if(p){const i=this.satisfies(e[p]);if(i!==void 0)return i}}if(h>0){const s=Object.keys(g).find(p=>this.isBrowser(p,!0));if(s!==void 0)return this.compareVersion(g[s])}}isBrowser(r,e=!1){return t.isBrowser(this.parser,r,e)}compareVersion(r){return t.compareVersion(this.parser,r)}isOS(r){return a.isOS(this.parser,r)}isPlatform(r){return n.isPlatform(this.parser,r)}isEngine(r){return u.isEngine(this.parser,r)}is(r,e=!1){return l.isAnything(this.parser,r,(f,g)=>t.isBrowser(f,g,e),n.isPlatform,a.isOS)}some(r=[]){return l.isSome(this.parser,r,t.isBrowser,n.isPlatform,a.isOS)}}class c{static getParser(r,e=!1){if(typeof r!="string")throw new Error("UserAgent should be a string");return new m(r,e)}static parse(r){return new m(r).getResult()}static get BROWSER_MAP(){return t.BROWSER_MAP}static get ENGINE_MAP(){return u.ENGINE_MAP}static get OS_MAP(){return a.OS_MAP}static get PLATFORMS_MAP(){return n.PLATFORMS_MAP}}exports.default=c;
