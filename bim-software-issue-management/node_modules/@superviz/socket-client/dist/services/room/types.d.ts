import z from 'zod';
import { PresenceSchema } from '../../common/types/presence.types';
export type SocketEvent<T extends any | unknown> = {
    name: string;
    roomId: string;
    connectionId: string;
    presence?: z.infer<typeof PresenceSchema>;
    data: T;
    timestamp: number;
};
export type RoomHistory = {
    roomId: string;
    room: {
        id: string;
        name: string;
        userId: string;
        apiKey: string;
        createdAt: Date;
    };
    events: SocketEvent<unknown>[];
    connectionId: string;
    timestamp: Date;
};
export type Callback<T> = (event: SocketEvent<T>) => void;
export declare const JoinRoomSchema: z.ZodObject<{
    name: z.ZodString;
    user: z.ZodObject<{
        id: z.ZodString;
        name: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        id?: string;
        name?: string;
    }, {
        id?: string;
        name?: string;
    }>;
}, "strip", z.ZodTypeAny, {
    name?: string;
    user?: {
        id?: string;
        name?: string;
    };
}, {
    name?: string;
    user?: {
        id?: string;
        name?: string;
    };
}>;
export type JoinRoomPayload = z.infer<typeof JoinRoomSchema>;
