import { Observable } from '../../common/utils';
import { Logger } from '../../common/utils/logger';
import { DefaultLauncher, LauncherFacade, LauncherOptions } from './types';
export declare class Launcher extends Observable implements DefaultLauncher {
    protected readonly logger: Logger;
    private isDestroyed;
    private activeComponents;
    private componentsToAttachAfterJoin;
    private activeComponentsInstances;
    private ioc;
    private LauncherRealtimeRoom;
    private realtime;
    private eventBus;
    private participant;
    private participants;
    private group;
    constructor({ participant, group: participantGroup }: LauncherOptions);
    /**
     * @function addComponent
     * @description add component to launcher
     * @param component - component to add
     * @returns {void}
     */
    addComponent: (component: any) => void;
    /**
     * @function attachComponentsAfterJoin
     * @description attach components after join
     * @returns {void}
     */
    private attachComponentsAfterJoin;
    /**
     * @function removeComponent
     * @description remove component from launcher
     * @param component - component to remove
     * @returns {void}
     */
    removeComponent: (component: any) => void;
    /**
     * @function destroy
     * @description destroy launcher and all components
     * @returns {void}
     */
    destroy: () => void;
    /**
     * @function canAddComponent
     * @description verifies if component can be added
     * @param component - component to be added
     * @returns {boolean}
     */
    private canAddComponent;
    /**
     * @function startAbly
     * @description start realtime service and join to room
     * @returns {void}
     */
    private startAbly;
    /**
     * @function subscribeToAblyEvents
     * @description subscribe to realtime events
     * @returns {void}
     */
    private subscribeToAblyEvents;
    /** Ably Listeners */
    private onAuthentication;
    /**
     * @function onParticipantListUpdate
     * @description on participant list update
     * @param participants - participants list
     * @returns {void}
     */
    private onParticipantListUpdate;
    /**
     * @function onParticipantJoined
     * @description on participant joined
     * @param ablyParticipant - ably participant
     * @returns {void}
     */
    private onParticipantJoined;
    private onSameAccount;
    /** New IO */
    /**
     * @function startIOC
     * @description start IO service
     * @returns {void}
     */
    private startIOC;
    /**
     * @function onParticipantJoinedIOC
     * @description on participant joined
     * @param presence - participant presence
     * @returns {void}
     */
    private onParticipantJoinedIOC;
    /**
     * @function onParticipantLeaveIOC
     * @description on participant leave
     * @param presence - participant presence
     * @returns {void}
     */
    private onParticipantLeaveIOC;
    /**
     * @function onParticipantUpdatedIOC
     * @description on participant updated
     * @param presence - participant presence
     * @returns {void}
     */
    private onParticipantUpdatedIOC;
}
/**
 * @function Launcher
 * @description create launcher instance
 * @param options - launcher options
 * @returns {LauncherFacade}
 */
declare const _default: (options: LauncherOptions) => LauncherFacade;
export default _default;
