import type { Presence3D as AutodeskPresence3D } from '@superviz/autodesk-viewer-plugin';
import type { Presence3D as MatterportPresence3D } from '@superviz/matterport-plugin';
import type { LauncherFacade, Participant, SuperVizSdkOptions } from '@superviz/sdk';
import { type Comments, FormElements, type Realtime, type VideoConference, type WhoIsOnline } from '@superviz/sdk/lib/components';
import type { PointersCanvas } from '@superviz/sdk/lib/components/presence-mouse/canvas';
import type { PointersHTML } from '@superviz/sdk/lib/components/presence-mouse/html';
import { ComponentNames as DefaultComponentNames } from '@superviz/sdk/lib/components/types';
import type { Presence3D as ThreeJsPresence3D } from '@superviz/threejs-plugin';
import type React from 'react';
export type ComponentNames = `${DefaultComponentNames}`;
export type RoomContextData = {
    addComponent: (component: SuperVizComponent) => void;
    removeComponent: (component: SuperVizComponent) => void;
    activeComponents: Record<ComponentNames, SuperVizComponent | undefined>;
    room: LauncherFacade | null;
    hasJoinedRoom: boolean;
    hasProvider: boolean;
};
export type RoomProviderCallbacks = {
    onParticipantJoined?: (participant: Participant) => void;
    onParticipantLeft?: (participant: Participant) => void;
    onParticipantLocalJoined?: (participant: Participant) => void;
    onParticipantLocalLeft?: (participant: Participant) => void;
    onParticipantLocalUpdated?: (participant: Participant) => void;
    onParticipantListUpdated?: (participantList: Participant[]) => void;
};
export type RoomProviderProps = RoomProviderCallbacks & {
    developerKey: string;
    roomId: SuperVizSdkOptions['roomId'];
    participant: {
        id: string;
        name: string;
        avatar?: {
            model3DUrl?: string;
            imageUrl?: string;
        };
    };
    group: SuperVizSdkOptions['group'];
    customColors?: SuperVizSdkOptions['customColors'];
    environment?: SuperVizSdkOptions['environment'];
    debug?: SuperVizSdkOptions['debug'];
    children: React.ReactNode;
};
export type MatterportComponent = MatterportPresence3D & {
    name: ComponentNames;
};
export type AutoDeskComponent = AutodeskPresence3D & {
    name: ComponentNames;
};
export type ThreeJsComponent = ThreeJsPresence3D & {
    name: ComponentNames;
};
export type SuperVizComponent = VideoConference | Comments | PointersCanvas | PointersHTML | Realtime | WhoIsOnline | MatterportComponent | AutoDeskComponent | FormElements;
export type InternalFeaturesContextData<T> = T extends SuperVizComponent ? Omit<RoomContextData, 'hasProvider'> & {
    component: T;
} : Omit<RoomContextData, 'hasProvider'>;
//# sourceMappingURL=room.types.d.ts.map