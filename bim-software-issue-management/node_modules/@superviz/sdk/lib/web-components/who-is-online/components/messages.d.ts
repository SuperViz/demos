import { CSSResultGroup, LitElement, PropertyValueMap } from 'lit';
import { HorizontalSide, Following, VerticalSide } from './types';
declare const WebComponentsBaseElement: import("../../base/types").Constructor<import("../../base/types").WebComponentsBaseInterface> & typeof LitElement;
export declare class WhoIsOnlineMessages extends WebComponentsBaseElement {
    static styles: CSSResultGroup[];
    following: Following | undefined;
    everyoneFollowsMe: boolean;
    isPrivate: boolean;
    verticalSide: VerticalSide;
    horizontalSide: HorizontalSide;
    private participantColor;
    private animationFrame;
    static properties: {
        following: {
            type: ObjectConstructor;
        };
        everyoneFollowsMe: {
            type: BooleanConstructor;
        };
        isPrivate: {
            type: BooleanConstructor;
        };
        verticalSide: {
            type: StringConstructor;
        };
        horizontalSide: {
            type: StringConstructor;
        };
    };
    constructor();
    protected firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    protected updated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    /**
     * @function repositionMessages
     * @description Reposition the messages container based on which side there's more free space
     * @returns {void}
     */
    private repositionMessages;
    /**
     * @function repositionInVerticalDirection
     * @description Reposition the messages container based on the vertical side with more free space
     * @returns {void}
     */
    private repositionInVerticalDirection;
    /**
     * @function repositionInHorizontalDirection
     * @description Reposition the messages container based on the horizontal side with more free space
     * @returns {void
     * }
     */
    private repositionInHorizontalDirection;
    /**
     * @function stopFollowing
     * @description Emits an event to stop following a participant
     * @returns {void}
     */
    private stopFollowing;
    /**
     * @function cancelPrivate
     * @description Emits an event to cancel private mode
     * @returns {void}
     */
    private cancelPrivate;
    /**
     * @function stopEveryoneFollowsMe
     * @description Emits an event to cancel the Everyone Follows Me mode (does not prevent participants from following the user individually)
     * @returns {void}
     */
    private stopEveryoneFollowsMe;
    private followingMessage;
    private everyoneFollowsMeMessage;
    private privateMessage;
    protected render(): import("lit").TemplateResult<1>;
}
export {};
