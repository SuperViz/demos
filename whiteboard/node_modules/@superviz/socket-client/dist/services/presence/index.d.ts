import type { Socket } from 'socket.io-client';
import { ErrorCallback } from '../../common/types/callbacks.types';
import { PresenceEvents } from '../../common/types/event.types';
import type { Presence } from '../../common/types/presence.types';
import { PresenceCallback, PresenceEvent } from './types';
export declare class PresenceRoom {
    private io;
    private presence;
    private roomId;
    private logger;
    private presences;
    private observers;
    constructor(io: Socket, presence: Presence, roomId: string);
    static register(io: Socket, presence: Presence, roomId: string): PresenceRoom;
    /**
     * @function get
     * @description Get the presences in the room
     * @returns {void}
     */
    get(next: (data: PresenceEvent[]) => void, error?: ErrorCallback): void;
    /**
     * @function update
     * @description update the presence data in the room
     * @param payload - The data to update
     * @returns {void}
     */
    update<T extends Object>(payload: T): void;
    /**
     * @function registerSubsjects
     * @description Register the subjects for the presence events
     * @returns {void}
     */
    private registerSubsjects;
    /**
     * @function on
     * @description Listen to an event
     * @param event - The event to listen to
     * @param callback - The callback to execute when the event is emitted
     * @returns {void}
     */
    on<T extends unknown>(event: PresenceEvents, callback: PresenceCallback<T>, error?: ErrorCallback): void;
    /**
     * @function off
     * @description Stop listening to an event
     * @param event - The event to stop listening to
     * @param callback - The callback to remove from the event
     * @returns {void}
     */
    off(event: PresenceEvents): void;
    /**
     * @function subscribeToPresenceEvents
     * @description Subscribe to the presence events
     * @returns {void}
     */
    private subscribeToPresenceEvents;
    /**
     * @function onPresenceJoin
     * @description Handle the presence join event
     * @param event - The presence event
     * @returns {void}
     */
    private onPresenceJoin;
    /**
     * @function onPresenceLeave
     * @description Handle the presence leave event
     * @param event - The presence event
     * @returns {void}
     */
    private onPresenceLeave;
    /**
     * @function onPresenceUpdate
     * @description Handle the presence update event
     * @param event - The presence event
     * @returns {void}
     */
    private onPresenceUpdate;
}
