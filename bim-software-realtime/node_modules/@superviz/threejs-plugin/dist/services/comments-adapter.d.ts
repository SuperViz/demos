import type { Annotation, PinAdapter, PinCoordinates, Observer as ObserverType } from '@superviz/sdk';
import { Camera, Scene, Renderer, Object3D } from 'three';
import { ParticipantByGroupApi } from './types';
export declare class ThreeJsPin implements PinAdapter {
    private logger;
    private isActive;
    private isPinsVisible;
    private annotations;
    private pins;
    private scene;
    private camera;
    private showcaseDiv;
    private divWrapper;
    private mouseElement;
    private temporaryPinCoordinates;
    private pinHeight;
    private animFrame;
    private onClickBinded;
    private animateBinded;
    onPinFixedObserver: ObserverType;
    private controls;
    private player;
    private showcaseSides;
    private commentsSide;
    private localParticipant;
    private pointerDownCoordinates;
    private selectedPin;
    private participants;
    constructor(scene: Scene, renderer: Renderer, camera: Camera, player?: Object3D, controls?: any);
    /**
     * @function destroy
     * @description destroys the canvas pin adapter.
     * @returns {void}
     * */
    destroy(): void;
    /**
     * @function setActive
     * @param {boolean} isOpen - Whether the canvas pin adapter is active or not.
     * @returns {void}
     */
    setActive(isOpen: boolean): void;
    setPinsVisibility(isVisible: boolean): void;
    /**
     * @function updateAnnotations
     * @description updates the annotations of the canvas.
     * @param {Annotation[]} annotations - New annotation to be added to the canvas.
     * @returns {void}
     */
    updateAnnotations(annotations: Annotation[]): void;
    /**
     * @function removeAnnotationPin
     * @description Removes an annotation pin from the canvas.
     * @param {string} uuid - The uuid of the annotation to be removed.
     * @returns {void}
     * */
    removeAnnotationPin(uuid: string): void;
    /**
     * @function createTemporaryPin
     * @description
            creates a temporary pin with the id
            temporary-pin to mark where the annotation is being created
     * @param {PinCoordinates} coordinates  - The coordinates of the pin to be created.
     */
    createTemporaryPin(coordinates: PinCoordinates): void;
    /**
     * @function addListeners
     * @description adds event listeners to the canvas element.
     * @returns {void}
     */
    private addListeners;
    /**
     * @function removeListeners
     * @description removes event listeners from the canvas element.
     * @returns {void}
     * */
    private removeListeners;
    /**
     * @function animate
     * @description animation frame
     * @returns {void}
     */
    private animate;
    /**
     * @function renderAnnotationsPins
     * @description Renders the annotations on the canvas.
     * @returns {void}
     */
    private renderAnnotationsPins;
    /**
     * @function hideTemporaryPin
     * @description hides the temporary pin if click outside an observed element
     * @param {MouseEvent} event the mouse event object
     * @returns {void}
     */
    private hideTemporaryPin;
    /**
     * @function setPointerDownCoordinates
     * @description stores the mouse down coordinates
     * @param {MouseEvent} event - The mouse event object.
     * @returns {void}
     */
    private setPointerDownCoordinates;
    /**
     * @function setCommentsMetadata
     * @description sets metadata about how the comments was initialized and the user avatar
     * @param {string} side  - The side of the window where the comments are
     * @param {string} avatar  - The avatar of the user
     */
    setCommentsMetadata: (side: 'left' | 'right') => void;
    /**
     * @function createPin
     * @description
            creates a temporary the actual pin
     * @param {Annotation} annotation  - The annotation saved in the database
     * @param {PinCoordinates} coordinates  - The coordinates of the pin to be created.
     */
    private createPin;
    private removeAnnotationsPins;
    /**
     * @function participantsList
     * @description - all participants of developer groupId
     * @param participants - all participants list
     */
    set participantsList(participants: ParticipantByGroupApi[]);
    /** Callbacks  */
    private annotationSelected;
    /**
     * @function resetSelectedPin
     * @description Unselects a pin by removing its 'active' attribute
     * @returns {void}
     * */
    private resetSelectedPin;
    /**
     * @function resetPins
     * @description Unselects selected pin and removes temporary pin.
     * @param {that} this - The canvas pin adapter instance.
     * @param {KeyboardEvent} event - The keyboard event object.
     * @returns {void}
     * */
    private resetPins;
    /**
     * @function onClickedPin
     * @description move to pin position
     * @returns {void}
     * */
    private onClickedPin;
    /**
     * @function onClick
     * @description callback when user clicked on iframe
     * @returns {void}
     * */
    onClick: (evt: any) => void;
    /**
     * @function renderDivWrapper
     * @description Creates a div wrapper for the pins.
     * */
    private renderDivWrapper;
    /**
     * @function position3DToScreen
     * @description translates a 3D coordinate to a 2D screen position
     * @returns 2D screen coordinate
     * */
    private position3DToScreen;
    /**
     * @function checkIsVisible
     * @description check if a pin is in the cameras view
     * @returns boolean
     * */
    private checkIsVisible;
    private distanceBetween;
    /**
     * @function createMouseElement
     * @description Creates a new mouse element for the canvas pin adapter.
     * @returns {HTMLElement} The newly created mouse element.
     */
    private createMouseElement;
    /**
     * @function onMouseMove
     * @description handles the mouse move event on the canvas.
     * @param event - The mouse event object.
     * @returns {void}
     */
    private onMouseMove;
    /**
     * @function onMouseLeave
     * @description
        Removes the mouse element and sets the canvas cursor
        to default when the mouse leaves the canvas.
     * @returns {void}
     */
    private onMouseLeave;
    /**
     * @function onMouseEnter
     * @description
          Handles the mouse enter event for the canvas pin adapter.
          If there is no mouse element, creates one.
     * @returns {void}
     */
    private onMouseEnter;
    private onToggleAnnotationSidebar;
}
