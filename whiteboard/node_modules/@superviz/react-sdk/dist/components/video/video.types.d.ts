import type { Avatar, DevicesOptions, Participant, ParticipantType } from '@superviz/sdk';
import type { DeviceEvent, Dimensions, MeetingConnectionStatus, MeetingState } from '@superviz/sdk/lib/common/types/events.types';
import type { CamerasPosition, LayoutMode, LayoutPosition, Locale, Offset } from '@superviz/sdk/lib/services/video-conference-manager/types';
export interface VideoProps {
    camsOff?: boolean;
    screenshareOff?: boolean;
    chatOff?: boolean;
    transcriptOff?: boolean;
    defaultAvatars?: boolean;
    offset?: Offset;
    enableFollow?: boolean;
    enableGoTo?: boolean;
    enableGather?: boolean;
    defaultToolbar?: boolean;
    devices?: DevicesOptions;
    language?: string;
    locales?: Locale[];
    avatars?: Avatar[];
    skipMeetingSettings?: boolean;
    allowGuests?: boolean;
    participantType?: `${ParticipantType}`;
    collaborationMode?: {
        enabled?: boolean;
        position?: `${CamerasPosition}`;
        modalPosition?: `${LayoutPosition}`;
        initialView?: `${LayoutMode}`;
    };
    styles?: string;
    callbacks?: {
        onToggleMicrophone?: () => void;
        onToggleCam?: () => void;
        onToggleTranscript?: () => void;
        onToggleChat?: () => void;
        onToggleScreenShare?: () => void;
        onClickHangup?: () => void;
        onToggleMeetingSetup?: () => void;
    };
}
export interface VideoCallbacks {
    onDestroy?: () => void;
    onFrameDimensionsChange?: (dimensions: Dimensions) => void;
    onWaitingForHostChange?: (waiting: boolean) => void;
    onConnectionStatusChange?: (status: MeetingConnectionStatus) => void;
    onMeetingStart?: () => void;
    onMeetingStateChange?: (state: MeetingState) => void;
    onSameAccountError?: () => void;
    onDevicesStateChange?: (state: DeviceEvent) => void;
    onHostChange?: (participantId: string) => void;
    onHostAvailable?: () => void;
    onNoHostAvailable?: () => void;
    onParticipantJoin?: (participant: Participant) => void;
    onLocalParticipantJoin?: (participant: Participant) => void;
    onParticipantLeave?: (participant: Participant) => void;
    onLocalParticipantLeave?: (participant: Participant) => void;
    onParticipantListChange?: (participants: Participant[]) => void;
    onParticipantAmountChange?: (amount: number) => void;
    onKickAllParticipants?: () => void;
    onKickLocalParticipant?: () => void;
    onMount?: () => void;
    onUnmount?: () => void;
}
export type VideoComponentProps = VideoProps & VideoCallbacks;
//# sourceMappingURL=video.types.d.ts.map