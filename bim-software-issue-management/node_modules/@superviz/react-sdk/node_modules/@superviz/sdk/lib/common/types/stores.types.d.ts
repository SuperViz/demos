import { useGlobalStore } from '../../services/stores';
import { PublicSubject } from '../../services/stores/common/types';
import { useWhoIsOnlineStore } from '../../services/stores/who-is-online/index';
export declare enum StoreType {
    GLOBAL = "global-store",
    COMMENTS = "comments-store",
    WHO_IS_ONLINE = "who-is-online-store"
}
type StoreApi<T extends (...args: any[]) => any> = {
    [K in keyof ReturnType<T>]: {
        subscribe(callback?: (value: keyof T) => void): void;
        subject: PublicSubject<keyof T>;
        publish<T>(value: T): void;
        value: any;
    };
};
export type Store<T> = T extends StoreType.GLOBAL ? StoreApi<typeof useGlobalStore> : T extends StoreType.WHO_IS_ONLINE ? StoreApi<typeof useWhoIsOnlineStore> : never;
export type StoresTypes = typeof StoreType;
export {};
