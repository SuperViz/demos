import { CSSResultGroup, LitElement, PropertyValueMap } from 'lit';
import { ParticipantByGroupApi } from '../../../common/types/participant.types';
import { CommentMention } from '../../../components/comments/types';
declare const WebComponentsBaseElement: import("../../base/types").Constructor<import("../../base/types").WebComponentsBaseInterface> & typeof LitElement;
export declare class CommentsCommentInput extends WebComponentsBaseElement {
    eventType: string;
    text: string;
    btnActive: boolean;
    editable: boolean;
    commentsInput: HTMLTextAreaElement;
    placeholder: string;
    mentionList: ParticipantByGroupApi[];
    mentions: CommentMention[];
    participantsList: ParticipantByGroupApi[];
    hideInput: boolean;
    private pinCoordinates;
    private autoCompleteHandler;
    constructor();
    static styles: CSSResultGroup[];
    static properties: {
        eventType: {
            type: StringConstructor;
        };
        text: {
            type: StringConstructor;
        };
        btnActive: {
            type: BooleanConstructor;
        };
        editable: {
            type: BooleanConstructor;
        };
        placeholder: {
            type: StringConstructor;
        };
        mentions: {
            type: ArrayConstructor;
        };
        mentionList: {
            type: ObjectConstructor;
        };
        participantsList: {
            type: ObjectConstructor;
        };
        hideInput: {
            type: BooleanConstructor;
        };
    };
    private addAtSymbolInCaretPosition;
    private getCommentInput;
    private get commentInput();
    private get sendBtn();
    private get optionsContainer();
    private get horizontalRule();
    private get closeButton();
    connectedCallback(): void;
    disconnectedCallback(): void;
    protected firstUpdated(_changedProperties: PropertyValueMap<any> | Map<PropertyKey, unknown>): void;
    updated(changedProperties: Map<string, any>): void;
    private userMentionedByTextInput;
    private buttonAtSymbol;
    private focusInput;
    private handleInput;
    private insertMention;
    private updateHeight;
    private sendEnter;
    private send;
    private closeEditMode;
    private onTextareaFocus;
    private onTextareaLoseFocus;
    private cancelComment;
    private commentInputEditableOptions;
    private commentInputOptions;
    protected render(): import("lit").TemplateResult<1>;
}
export {};
